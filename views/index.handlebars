<div class="container-fluid">

  <div class="row">
    <div class="input-group">
      <input id="queryTextBox" style = "width: 90%;" type="text" autocomplete="off" class="form-control" placeholder="e.g. orchard" aria-label="Search for...">
      <span class="input-group-btn" style = "width: 10%;">
        <button class="btn btn-secondary" type="button">Go!</button>
      </span>
    </div>
    <div id="suggestionListContainer" class="list-group" style="z-index: 1; position: absolute; padding-top:38px; width: 90%;"></div>
  </div>



  <script id="suggestionListTemplate"  type ="text/x-handlebars-template">
    \{{#each suggestions}}
    <a href="#" onclick="createInfoPanel(\{{json this}});return;" class="list-group-item list-group-item-action">\{{name}}  ||  \{{description}}</>
      \{{/each}}
  </script>

</div>
<br>
<div class="container-fluid" style = "height: 100%;">
  <div class="row" style = "height: 100%;">

    <div id="map_panel" class="col-md-8 col-sm-8" style = "height: 90%; width:100%;">
    </div>

    <div id="info_panel" style = "height: 90%;" class="col-md-4 col-sm-4">

      <!-- Nav tabs -->
      <ul class="nav nav-tabs nav-fill"  id="myTab" role="tablist">
        <li class="nav-item">
          <a class="nav-link active" data-toggle="tab" href="#detail_info_panel" role="tab" aria-controls="home">Details  </a>
        </li>
        <li class="nav-item">
          <a id ="directionsNavLink" class="nav-link disabled" data-toggle="tab" href="#directions_panel" role="tab" aria-controls="profile">Directions</a>
        </li>
      </ul>

      <div class="tab-content" style = "height: 90%; border: 1px solid; border-color: #ddd #ddd ;  padding: 10px; border-radius: 0.25rem; border-top-left-radius: 0rem;">
        <div class="tab-pane active" style = "position: relative; height: 100%;" id="detail_info_panel" role="tabpanel">
          <div id ="detailInfoPanelContainer" style = "height: 100%;">
            <!-- To be populated by Handlesbars-->
            </br><h4>No location selected.</h4>
          </div>
          <div  id = "buttonContainer" style = "display: none; width:100%; position: absolute; bottom: 0;">
            <!--<div class="row">-->



                {{#if user}}
                <button type="button" class="btn btn-secondary" style = "margin-left: 7px;" data-toggle="modal" data-target="#likesModal">
                  <span class="glyphicon glyphicon-thumbs-up" aria-hidden="true"> </span> <span id="likeCount">4</span>
                </button>
                <button type="button" class="btn btn-secondary" style = "margin-left: 7px;" data-toggle="modal" data-target="#dislikesModal">
                  <span class="glyphicon glyphicon-thumbs-down" aria-hidden="true"> </span> <span id="dislikeCount">4</span>
                </button>
                {{else}}
                <button type="button" class="btn btn-secondary" style = "margin-left: 7px;" data-toggle="modal" data-target="#loginModal">
                  <span class="glyphicon glyphicon-thumbs-up" aria-hidden="true"> </span> <span id="likeCount">4</span>
                </button>
                <button type="button" class="btn btn-secondary" style = "margin-left: 7px;" data-toggle="modal" data-target="#loginModal">
                  <span class="glyphicon glyphicon-thumbs-down" aria-hidden="true"> </span> <span id="dislikeCount">4</span>
                </button>
                {{/if}}

                <!-- likesModal Modal -->
                <div class="modal fade" id="likesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                  <div class="modal-dialog" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Feedback</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <div class="modal-body">
                        Are you sure you want to flag this hotspot as good?
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <form action="" method="post" onSubmit="handleFeedbackForm(this);">
                          <input type="hidden" name="hotspotid" value=""/>
                          <input type="hidden" name="flagType" value="like"/>
                          <button type="submit" class="btn btn-primary">Comfirm</button>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- dislikesModal Modal -->
                <div class="modal fade" id="dislikesModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                  <div class="modal-dialog" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Feedback</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <div class="modal-body">
                        Are you sure you want to flag this hotspot as bad?
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <form action="" method="post" onSubmit="handleFeedbackForm(this);">
                          <input type="hidden" name="hotspotid" value=""/>
                          <input type="hidden" name="flagType" value="dislike"/>
                          <button type="submit" class="btn btn-primary">Comfirm</button>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>

                <!-- Need to login Modal -->
                <div class="modal fade" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                  <div class="modal-dialog">
            				<div class="loginmodal-container">
            					<center><h2>Please login to continue</h2></center><br>
              				  <form action="" method="post" onSubmit="handleFeedbackLoginForm(this);">
                					<input type="text" name="username" placeholder="Username">
                					<input type="password" name="password" placeholder="Password">
                          <input type="hidden" name="currentLocation" value="">
                					<input type="submit" name="login" class="login loginmodal-submit" value="Login">
              				  </form>
            				    <div class="login-help">
            					    <a href="/users/register">Register</a>
            				    </div>
            				</div>
          			   </div>
                </div>

                <button id="getDirectionButton" type="button" class="btn btn-success" style = "position: absolute; right:0px; " data-container="body" data-toggle="popover" data-title="Where are you heading from?" data-placement="top" data-html="true">Go!</button>
                <div id="popover-content" style = "display: none;">
                  <div class="input-group">
                    <input id ="startPointInput" style = "width: 40%;" type="text" class="form-control" placeholder="e.g. NTU" aria-label="Search for...">
                      <select id ="transitOptions" class="form-control">
                        <option>Drive</option>
                        <option>Transit</option>
                        <option>Walk</option>
                      </select>
                    <span class="input-group-btn">
                      <button class="btn btn-primary" type="button" onclick="handleGetDirectionForm()">Go!</button>
                    </span>
                  </div>
                </div>
          </div>

        </div><!-- end of detail_info_panel--->
        <div class="tab-pane" id="directions_panel" style = "height:100%; overflow-y:auto;" role="tabpanel">
            <!-- To be populated by GMAPS API-->
        </div>
      </div><!-- end of tab content --->
    </div><!-- end of info_panel --->
  </div>


</div>

<script id="detailInfoPanelTemplate"  type ="text/x-handlebars-template">
  <div style = "padding-top: 20%; font-size:1.0vw">
    <br/>
    Name: \{{name}} </br>
    </br>
    Description: \{{description}}</br>
    </br>
    Address: \{{address}}</br>
    </br>
    Crowd level:<div id ="crowdLoader" style = "padding-left: 10px; padding-top: 10px; width: 30px; display: inline-block;"><div  class="loader"></div></div><span id ="crowdLevelBadge" style = "display: none; margin-left: 10px;"></span></br>
    </br>
  </div>

</script>

<script>
$(function () {
  $('[data-toggle="popover"]').popover();
   $('[data-toggle="tooltip"]').tooltip();



})

$("[data-toggle=popover]").popover({
    html: true,
	content: function() {
          return $('#popover-content').html();
        }
});
</script>

<script>
  var socket = io();
  var suggestionList;
  var dataList = document.getElementById('json-datalist');
  var input = document.getElementById('queryTextBox');
  var listGrp = document.getElementById('suggestionList');
  {{#if currentLocation}} var currentLocation = {{{currentLocation}}};
  {{else}} var currentLocation = null;{{/if}}
  var user = {{{json user}}};

   checkLocationIsSet = function(){
    if(currentLocation){
      initMap(currentLocation);
      createInfoPanel(currentLocation);
      //$('#dislikesModal').modal('show');
    }
    else initMap(null);
  }


  //setup before functions
  var typingTimer; //timer identifier
  var doneTypingInterval = 600; //time in ms

  //on keyup, start the countdown
  $('#queryTextBox').keyup(function() {
    clearTimeout(typingTimer);
    if ($('#queryTextBox').val()) {
      typingTimer = setTimeout(doneTyping, doneTypingInterval);
    } else clearChildren("suggestionListContainer");
  });

  //user is "finished typing," do something
  function doneTyping() {
    socket.emit('search', $('#queryTextBox').val());
  }

  socket.on('searchResults', function(results) { //event 2

    createSuggestionList(results);

  });

  createSuggestionList = function(suggestions){

    var rawTemplate = document.getElementById('suggestionListTemplate').innerHTML;
    var compiledTemplate = Handlebars.compile(rawTemplate);
    var generatedHTML = compiledTemplate({
        suggestions: suggestions
    });
    var container = document.getElementById('suggestionListContainer');
    container.innerHTML = generatedHTML;

  }

  createInfoPanel = function(location){


    currentLocation = location;//Update global var
    if(currentLocation.dislikes)
      dislikes = currentLocation.dislikes.length;
    else dislikes = 0;
    if(currentLocation.likes)
      likes = currentLocation.likes.length;
    else likes = 0;
    console.log(likes);
    clearMarkers();
    plotMarker(location);
    checkCrowdLvl();
    getCarParkInfo();
    clearChildren("suggestionListContainer");
    $('#dislikeCount').text(dislikes);
    $('#likeCount').text(likes);
    $( "#buttonContainer" ).show( "slow" );
    var rawTemplate = document.getElementById('detailInfoPanelTemplate').innerHTML;
    var compiledTemplate = Handlebars.compile(rawTemplate);
    var generatedHTML = compiledTemplate(location);
    var container = document.getElementById('detailInfoPanelContainer');
    container.innerHTML = generatedHTML;

  }

  clearChildren = function(parent_id) {
    var parent = document.getElementById(parent_id);
    while (parent.firstChild) {
      parent.removeChild(parent.firstChild);
    }

  };

  testUser = function(){
    //can try access object by converting string to json
    var username = "{{username}}";//No need \ in front of curly braces as it's rendering from server side
    console.log(username);
  }

  handleFeedbackForm = function(form){
    console.log(currentLocation.name);
    console.log(currentLocation._id);
    form.hotspotid.value = currentLocation._id;
    form.action = "/feedback";
  }
  handleFeedbackLoginForm = function(form){
    form.currentLocation.value = JSON.stringify(currentLocation);
    form.action = "/users/login";
  }

  handleGetDirectionForm = function(){
    $('#directionsNavLink').removeClass('nav-link disabled');
    $('#directionsNavLink').addClass('nav-link');
    $('#getDirectionButton').popover('hide')
    $('#myTab a:last').tab('show') // Select last tab
    marker.setMap(null);

    var startLoc = $('.popover-content').find('#startPointInput').val();//Text box is now generated as a new instance in popover content
    var transitOption = $('.popover-content').find('#transitOptions').val();
    var endLoc = currentLocation.address;
    var mode;
    switch (transitOption) {
    case "Transit":
    mode = google.maps.DirectionsTravelMode.TRANSIT;
    break;
    case "Drive":
    mode = google.maps.DirectionsTravelMode.DRIVING;
    getCarParkInfo();
    break;
    case "Walk":
    mode = google.maps.DirectionsTravelMode.WALKING;
    break;
    }
    var request = {
      origin: startLoc,
      destination: endLoc,
      travelMode: mode
    };

    directionsService.route(request, function(response, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
        geocoder.geocode( {'address' : startLoc}, function(results, status) {
          if (status == google.maps.GeocoderStatus.OK) {
            map.setCenter(results[0].geometry.location);
          }
          });
      }
    });

  }

  getCarParkInfo = function(){
    if(user)
      socket.emit('reqCarparkInfo', {currentLocation: currentLocation, userId:  user._id});
    else
      socket.emit('reqCarparkInfo', {currentLocation: currentLocation, userId:  null});

  }

  socket.on('nearbyCarparks', function(results) { //event 2
    console.log(results);
    plotCarparksMarkers(results);
  });

  checkCrowdLvl = function(){
    socket.emit('checkCrowdLvl', currentLocation);
  }

  socket.on('crowdLvl', function(results) { //event 2
    console.log(results.crowd);
    $( "#crowdLoader" ).hide();
    if(results.crowd === 'Low'){
      $('#crowdLevelBadge').addClass('badge badge-success');
      $('#crowdLevelBadge').text('LOW');
      $( "#crowdLevelBadge" ).show( "slow" );
    } else if(results.crowd === 'Medium'){
      $('#crowdLevelBadge').addClass('badge badge-warning');
      $('#crowdLevelBadge').text('MEDIUM');
      $( "#crowdLevelBadge" ).show( "slow" );
    }  else {
      $('#crowdLevelBadge').addClass('badge badge-danger');
      $('#crowdLevelBadge').text('HIGH');
      $( "#crowdLevelBadge" ).show( "slow" );
    }

  });


  Handlebars.registerHelper('json', function(context) {
    return JSON.stringify(context);
});
</script>

<script>
  var map;
  var markersArray = [];
  var carparkMarker;
  var geocoder = new google.maps.Geocoder();
  var directionsService = new google.maps.DirectionsService();
  var directionsDisplay = new google.maps.DirectionsRenderer();

  var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
  var icons = {
    parking: {
      icon: iconBase + 'parking_lot_maps.png'
    },
  };

/*
  var map = new google.maps.Map(document.getElementById('map_panel'), {
    zoom: 7,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });
*/
  function initMap(location) {

                map = new google.maps.Map(document.getElementById('map_panel'), {
                    zoom: 11,
                    mapTypeId: google.maps.MapTypeId.ROADMAP,
                    clickableIcons: false
                });

                directionsDisplay.setMap(map);
                directionsDisplay.setPanel(document.getElementById('directions_panel'));

                if(location){
                  address = location.address;
                  map.setZoom(17);
                }
                else address = "singapore";
                geocoder.geocode( {'address' : address}, function(results, status) {
                  if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);
                  }
                  });
                //selectedLoc(results);
            }

  function plotMarker(location){

    marker = new google.maps.Marker({
                            position: new google.maps.LatLng(location.lat,location.lon),
                            map: map,
                            title: location.name,
                        });
    map.setZoom(17);
    map.panTo(marker.position);
    markersArray.push(marker);


  }

  function plotCarparksMarkers(carparksObj){

    if(carparksObj.carparks.length == 0)
      return;
    for(i = 0; i < carparksObj.carparks.length; i++){
      currentCarpark = carparksObj.carparks[i];
      carparkMarker = new google.maps.Marker({
                              position: new google.maps.LatLng(currentCarpark.Latitude,currentCarpark.Longitude),
                              map: map,
                              title: currentCarpark.Development + " | Vancancy: " + currentCarpark.Lots,
                              icon: icons['parking'].icon,
                          });
      markersArray.push(carparkMarker);
    }
    map.setZoom(15);


  }

  function clearMarkers(){

    if(markersArray.length){
      for (var i = 0; i < markersArray.length; i++ ) {
        markersArray[i].setMap(null);
      }
      markersArray = [];

    }

  }

  checkLocationIsSet();
</script>
