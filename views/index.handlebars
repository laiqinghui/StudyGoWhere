<div class="container">

  <div class="row">
    <div class="input-group">
      <input id="queryTextBox" style = "width: 90%;" type="text" autocomplete="off" class="form-control" placeholder="E.g. orchard" aria-label="Search for...">
      <span class="input-group-btn" style = "width: 10%;">
        <button class="btn btn-secondary" type="button">Go!</button>
      </span>
    </div>
    <div id="suggestionListContainer" class="list-group" style="z-index: 1; position: absolute; padding-top:38px; width: 90%;"></div>
  </div>



  <script id="suggestionListTemplate"  type ="text/x-handlebars-template">
    \{{#each suggestions}}
    <a href="#" onclick="createInfoPanel(\{{json this}});return;" class="list-group-item list-group-item-action">\{{name}}  ||  \{{description}}</>
      \{{/each}}
  </script>

</div>
<br>
<div class="container">
  <div class="row">

    <div id="map_panel" class="col-md-8 col-sm-8" style = "height: 400px;">
    </div>

    <div id="info_panel" style = "height: 400px;" class="col-md-4 col-sm-4">

      <!-- Nav tabs -->
      <ul class="nav nav-pills nav-fill" style = "height: 10%;" id="myTab" role="tablist">
        <li class="nav-item">
          <a class="nav-link active" data-toggle="tab" href="#detail_info_panel" role="tab" aria-controls="home">Details</a>
        </li>
        <li class="nav-item">
          <a id ="directionsNavLink" class="nav-link disabled" data-toggle="tab" href="#directions_panel" role="tab" aria-controls="profile">Directions</a>
        </li>
      </ul>

      <div class="tab-content" style = "height: 90%;">
        <div class="tab-pane active" id="detail_info_panel" role="tabpanel">
          <div id ="detailInfoPanelContainer">
            <!-- To be populated by Handlesbars-->
            </br><h4>No location selected.</h4>
          </div>
          <div class="container">
            <div class="row">
              <div id ="getDirectionContainer" style = "display: none;">
                <button id="getDirectionButton" type="button" class="btn btn-success" data-container="body" data-toggle="popover" data-title="Where are you heading from?" data-placement="bottom" data-html="true">Get directions!</button>
                <div id="popover-content" style = "display: none;">
                  <div class="input-group">
                    <input id ="startPointInput" style = "width: 40%;" type="text" class="form-control" placeholder="e.g. NTU" aria-label="Search for...">
                      <select id ="transitOptions" class="form-control">
                        <option>Drive</option>
                        <option>Transit</option>
                        <option>Walk</option>
                      </select>
                    <span class="input-group-btn">
                      <button class="btn btn-primary" type="button" onclick="handleGetDirectionForm()">Go!</button>
                    </span>
                  </div>
                </div>
              </div><!-- end of getDirectionContainer--->

              <div id = "flagHotspotContainer" style = "display: none;">
                <!-- Button trigger modal -->
                <button type="button" class="btn btn-danger" style = "margin-left: 20px;" data-toggle="modal" data-target="#comfirmFlagModal">
                  Flag
                </button>

                <!-- Modal -->
                <div class="modal fade" id="comfirmFlagModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
                  <div class="modal-dialog" role="document">
                    <div class="modal-content">
                      <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Feedback</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                          <span aria-hidden="true">&times;</span>
                        </button>
                      </div>
                      <div class="modal-body">
                        Are you sure you want to flag this hotspot?
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <form action="" method="post" onSubmit="handleFeedbackForm(this);">
                          <input type="hidden" name="hotspotid" value=""/>
                          <button type="submit" class="btn btn-primary">Comfirm</button>
                        </form>
                      </div>
                    </div>
                  </div>
                </div>

              </div><!-- end of flagHotspotContainer--->
            </div>
          </div>
        </div><!-- end of detail_info_panel--->
        <div class="tab-pane" id="directions_panel" style = "height:100%; overflow-y:auto;" role="tabpanel">
            <!-- To be populated by GMAPS API-->
        </div>
      </div><!-- end of tab content --->
    </div><!-- end of info_panel --->
  </div>

</div>
</div>

<script id="detailInfoPanelTemplate"  type ="text/x-handlebars-template">
  </br>
  Name: \{{name}} </br>
  </br>
  Description: \{{description}}</br>
  </br>
  Address: \{{address}}</br>
  </br>
  Crowd Level: RED</br>
  </br>

</script>

<script>
$(function () {
  $('[data-toggle="popover"]').popover();
   $('[data-toggle="tooltip"]').tooltip();



})

$("[data-toggle=popover]").popover({
    html: true,
	content: function() {
          return $('#popover-content').html();
        }
});
</script>

<script>
  var socket = io();
  var suggestionList;
  var dataList = document.getElementById('json-datalist');
  var input = document.getElementById('queryTextBox');
  var listGrp = document.getElementById('suggestionList');
  var currentLocation;
  //setup before functions
  var typingTimer; //timer identifier
  var doneTypingInterval = 600; //time in ms

  //on keyup, start the countdown
  $('#queryTextBox').keyup(function() {
    clearTimeout(typingTimer);
    if ($('#queryTextBox').val()) {
      typingTimer = setTimeout(doneTyping, doneTypingInterval);
    } else clearChildren("suggestionListContainer");
  });

  //user is "finished typing," do something
  function doneTyping() {
    socket.emit('search', $('#queryTextBox').val());
  }

  socket.on('searchResults', function(results) { //event 2

    createSuggestionList(results);

    /*Alternative codes if not using handlebars:

    for (count = 0; count < results.length; count++) {

      var list = document.createElement('a'); // Create a new <option> element.
      list.setAttribute('href', "#");
      list.setAttribute('class', "list-group-item list-group-item-action");
      var txt = document.createTextNode(results[count].name + " | " + results[count].description);
      list.appendChild(txt);

      //var createAText = document.createTextNode(results[count].name + " | " + results[count].description);
      //list.appendChild(createAText);
      listGrp.appendChild(list);
    }
    */

  });

  createSuggestionList = function(suggestions){

    var rawTemplate = document.getElementById('suggestionListTemplate').innerHTML;
    var compiledTemplate = Handlebars.compile(rawTemplate);
    var generatedHTML = compiledTemplate({
        suggestions: suggestions
    });
    var container = document.getElementById('suggestionListContainer');
    container.innerHTML = generatedHTML;

  }

  createInfoPanel = function(location){

    currentLocation = location;//Update global var
    testUser();
    clearChildren("suggestionListContainer");
    $( "#getDirectionContainer" ).show( "slow" );
    $( "#flagHotspotContainer" ).show( "slow" );
    var rawTemplate = document.getElementById('detailInfoPanelTemplate').innerHTML;
    var compiledTemplate = Handlebars.compile(rawTemplate);
    var generatedHTML = compiledTemplate(location);
    var container = document.getElementById('detailInfoPanelContainer');
    container.innerHTML = generatedHTML;

  }

  clearChildren = function(parent_id) {
    var parent = document.getElementById(parent_id);
    while (parent.firstChild) {
      parent.removeChild(parent.firstChild);
    }

  };

  testUser = function(){
    //can try access object by converting string to json
    var username = "{{username}}";//No need \ in front of curly braces as it's rendering from server side
    console.log(username);
  }

  handleFeedbackForm = function(form){
    console.log(currentLocation.name);
    console.log(currentLocation._id);
    form.hotspotid.value = currentLocation._id;
    form.action = "/feedback";
  }

  handleGetDirectionForm = function(){
    $('#directionsNavLink').removeClass('nav-link disabled');
    $('#directionsNavLink').addClass('nav-link');
    $('#getDirectionButton').popover('hide')
    $('#myTab a:last').tab('show') // Select last tab
    var startLoc = $('.popover-content').find('#startPointInput').val();//Text box is now generated as a new instance in popover content
    var transitOption = $('.popover-content').find('#transitOptions').val();
    var endLoc = currentLocation.address;
    var mode;
    switch (transitOption) {
    case "Transit":
    mode = google.maps.DirectionsTravelMode.TRANSIT;
    break;
    case "Drive":
    mode = google.maps.DirectionsTravelMode.DRIVING;
    getCarParkInfo();
    break;
    case "Walk":
    mode = google.maps.DirectionsTravelMode.WALKING;
    break;
    }
    var request = {
      origin: startLoc,
      destination: endLoc,
      travelMode: mode
    };

    directionsService.route(request, function(response, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        directionsDisplay.setDirections(response);
      }
    });

  }

  getCarParkInfo = function(){

    socket.emit('reqCarparkInfo', $('#queryTextBox').val());

  }

  socket.on('carparkInfo', function(results) { //event 2
    console.log(results);
  });


  Handlebars.registerHelper('json', function(context) {
    return JSON.stringify(context);
});
</script>

<script>
  var directionsService = new google.maps.DirectionsService();
  var directionsDisplay = new google.maps.DirectionsRenderer();

  var map = new google.maps.Map(document.getElementById('map_panel'), {
    zoom: 7,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  directionsDisplay.setMap(map);
  directionsDisplay.setPanel(document.getElementById('directions_panel'));


</script>
